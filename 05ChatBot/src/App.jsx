import React, { useState, useEffect, useRef } from "react";
import "./App.css";
import Logo from "./components/Logo";
import InputBox from "./components/InputBox";
import { msgContext } from "./context/contexts";
import { GoogleGenerativeAI } from "@google/generative-ai";

function App() {
  const [msg, setMsg] = useState("");
  const [sender, setSender] = useState([]);
  const messagesEndRef = useRef(null);

  const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  const generateContent = async (userMsg) => {
    try {
      setSender((prevSender) => [
        ...prevSender,
        { text: "Loading...", type: "bot" },
      ]);

      const result = await model.generateContent(userMsg);
      const chatbotResult = result.response.text();

      setSender((prevSender) => [
        ...prevSender.slice(0, -1),
        { text: chatbotResult, type: "bot" },
      ]);
    } catch (error) {
      console.error("Error generating content:", error);

      setSender((prevSender) => [
        ...prevSender.slice(0, -1),
        { text: "Error generating response. Please try again.", type: "bot" },
      ]);
    }
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [sender]);

  return (
    <msgContext.Provider
      value={{ msg, setMsg, sender, setSender, generateContent }}
    >
      <div className="flex justify-center items-center h-screen">
        <div className="w-[320px] h-[470px] bg-blue-500 rounded-xl overflow-hidden">
          <div className="flex items-center w-full h-[50px] bg-blue-300 pl-4 gap-1">
            <Logo />
            <h1 className="text-base font-semibold">Daemon</h1>
          </div>
          <div className="w-full bg-blue-200 h-[360px] p-2 overflow-y-scroll no-scrollbar">
            <div className="flex flex-col items-center justify-center gap-1 w-full h-[180px]">
              <Logo className="w-[70px] h-[70px]" />
              <h3 className="text-xl font-semibold">Daemon</h3>
              <p className="text-sm">
                The messages are generated by AI. Some may be inaccurate or
                inappropriate.
                <span className="text-blue-600 cursor-pointer">
                  {" "}
                  Learn more
                </span>
              </p>
            </div>
            <ul>
              {sender.map((task, index) => (
                <li
                  key={index}
                  className={`${
                    task.type === "bot"
                      ? "mr-auto bg-white"
                      : "ml-auto bg-blue-600 "
                  } w-fit max-w-[270px] break-words px-2 py-1 text-xs rounded-xl mt-2 text-left`}
                >
                  {task.text}
                </li>
              ))}
              <div ref={messagesEndRef} />
            </ul>
          </div>
          <div className="flex items-center justify-center w-full h-[60px] bg-blue-200 gap-1">
            <InputBox />
          </div>
        </div>
      </div>
    </msgContext.Provider>
  );
}

export default App;
